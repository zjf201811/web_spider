    1. 程序员真的有必要买一个机械键盘吗？

有没有必要不好说，反正我用了是能够提升敲击键盘写代码的满足感。之前是用普通的蓝牙键盘(百元鼠键套装)  ໂ ໃ 





    2. 真的会有人用 vim 开发大的项目吗？

我最近几年一直在用 vim 写项目，前端和后端都有，也有同事用 vim 还有  emacs 。怎么定义大型项目是个问题，几万行代码？十几万行？当你习惯了一种工具，做什么项目都会用它。





    3. Python如何实现任意语种的语音转文字？

深度学习 机器学习不懂。我们之前做过直接调用讯飞接口的实现，文本转语音，语音转文本。





    4. 如果程序猿能接私活, 那么是否可以在鹤岗买房?

不接私活就不能在鹤岗买房了吗？不过，为啥要在鹤岗买，这么多地儿。（：~





    5. 如何高效学python？

最核心的一点是：多写有用的代码。就学习来说，要「走直线」，就是说：先找本Python 基础的书来看，比如《Python 基础教程》或者《Python编程：从入门到实践》，然后找进阶的书，比如《Python 高级编程》、《流畅的 Python》等。（补充一点：每个阶段的书只需要看精一本即可，同水平的重复是低效的）。就实践来说，跟学习的内容对应，但最好能把一个小的 Demo 不断做大。随着代码量的增多，对于程序设计或者 Python 语言之外的需求就会随之而来。比如，怎么写面向对象的代码（意识到这只是一种众多开发方法中的一种），怎么优化数据、网络访问等等。随着你写的越多（注意：不是今天写个几百行的 Demo，然后扔了，明天再写个几百行的 Demo），涉及到的内容就越多。





    6. 请问图中的代码中为什么是nested.state+=1放在nested.state=start前面?

nested 函数中缩进有问题





    7. 程序员怎么提升自己？

工作中几个能力是要有的：算法能力，尤其是面试前需要刷一段时间的算法；代码能力，对自己用到的语言/库/框架能够熟练到拿来即用；设计能力，是指程序设计能力，除了能实现某个需求外，还需要考虑程序的健壮性和可维护性；业务能力，能够知道需求方确切的想要什么，并且能够很好的沟通出需求方的需求。怎么提高呢？个人看法如下：算法的话，刷题会比较快，很多人都会以刷 LeetCode 为乐，挺好的事；代码能力，只能是多写，做不同类型的项目，但是都需要做的足够完整，完成后需要总结下项目中用到的技术有哪些，以及有没有类似的技术；设计能力，需要深入一个项目，足够完整，不断的迭代。只有一个项目不断迭代（不断啃自己之前写过的「烂」代码）的情况下，才能知道之前的设计有什么问题，以后如何避免；业务能力，需要对自己所涉及的业务领域有足够多的了解，绝大部分情况下，技术只是支撑业务实现，只有当你掌握了足够的信息时，才能快速的 Get 到对方的点是什么，以及对方可能缺了什么。





    8. nginx + uwsgi 部署Django项目 静态文件找不到找不到怎么解决？

部署静态资源的方式：代码 「同步」 到服务器上执行 `./manage.py collectstatic`配置 Nginx path 到 对应的静态资源目录上。题主可以贴下你的 Nginx 配置。另，线上不要用 Django 来 Serve 静态资源。





    9. 怎么安装Python软件?求网址。？

Download PythonMiniconda - Conda documentation





    10. 在Django中如何动态的实现给某个field赋值？

这个不是动态吧，就是正常赋值。你可以在 form 层，view 层，或者 Model 层做。if 条件判断一下然后设置，或者配置一个 mapping :a_b_mapping = {
    1: 'choice1',
    2: 'choice2',
}






    11. Django项目如何部署上线？

其实有完整的方案了，就在我的书里。简单来说就是： Nginx + Gunicorn + Django (VPS 的情况下)，然后通过 fabric + gitlab 来自动部署。





    12. 一辈子自学编程能有什么作为?

谢邀。这个问题的出发点不太合理。我们常说「学以致用」，一辈子只学 不用，那能有啥用。时间比较多就自己搞项目做吧，有产出的知识才有用。搞出一个能让大家使用的程序，这个乐趣能进一步激发你深挖/学习的动力。





    13. 非科班程序员能得到认可吗？

能。认可能力，不是认可学历。





    14. 作为一个程序员，你的桌子上都有些什么？

Macbook pro + 两个 Dell 的显示器(一横一竖放置)两个水杯，一个装水，一个装 装水的水杯纸巾插座





    15. 想学习Python Django，请推荐从入门到精通各个阶段的好书？

这个应该是很久之前的问题了，看其他答主还在推荐 The Django Book，注意，「翻译版」The Django Book 2.0 的并不是 说 Django 2.0。假定已经入门了 Python，Django 中文方面的书，入门带进阶，自荐一下《Django企业开发实战》，书里的内容搞懂之后，剩下的就是去写代码、翻文档查漏补缺。精通，没有书可以带你做到，即便是看了我录的 Django 源码解析的视频，也不能。还是得需要自己动手去翻源码，去理解框架的原理。另外 精通一个基于 Python 的框架，前置条件是对 Python 掌握的不错。最后，即便是我这样不时会翻下 Django 源码的人，也只能说熟悉了 Django 源码的部分工作机制，不敢说精通，只是对于用过的会比较熟悉。





    16. 公司中的django项目，一般用django的models，还是自己封装？

基本上没有自己封装的需求，自己封装一套 model ，然后你发现其他的模块都「失效了」。。。。。





    17. 你是如何学习Django的？

简单说下我的学习方式，仅供参考。在正式转到 Python Web 开发之前（2011年的时候）是在写 Java 和一堆其他的语言，毕竟是小公司，啥都做，有啥项目就用啥语言。之后换了另外一家创业公司，用的 Django，怎么转呢？其实不需要太多时间，对于一个有一些 Web 开发经验的人来说。刚开始阶段 步骤如下：花两三天的时间看了下《简明 Python 教程》看了下其他同事写的 Django 项目，以及一本在线中译之后的《The Django Book》（现在不推荐看这本书，版本太老了）开始维护项目，看着其他人怎么写我也怎么写。这个阶段中可以产出项目了，毕竟照猫画虎也不是多复杂，但是对于 Django 以及 Python 的掌握都很有限。后来加入 sohu，算是正儿八经的开始撸 Django 的官方文档，以及 admin 部分的源码（当时的业务有基于 admin 的定制）。现在回过头来看，学习Django 比较有效的方式还是去做实际的项目，比如 我会去撸文档、撸源码，是因为发现了项目中有很多我不能 hold 住的东西。另外，入门可能需要看书，但是掌握到一定程度之后还是以官方内容（文档和源码）为主，因为这个才是根本，也会让你在学习上产生滚雪球的效应——随着你越来越熟悉它，你能越来越快的熟悉跟它像的内容。可以参考我之前的年度总结：个人回忆录之一年总结（记2012.01至2013.03） | the5fire的技术博客再往后慢慢掌握了公司中涉及到的技术栈之后，自己用 Django 重写了个人博客系统，一样的技术栈，类似的开发和部署逻辑，不一样的是，在博客系统中可以大胆的做各种尝试，比如始终保持使用最新的版本，无论是 Django 还是 Python。这样可以比在公司中更快的得到升级版本上的一些经验。当然，再之后，还是不断的撸源码，因为当你对源码有了一定了解之后，会发现，看源码会比看文档更快和直接，尤其是现在各种先进的 IDE 提供了自动补全和跳转到定义的功能。关于题主最后说到的问题，你可以需用先理解数据的传递流程，从用户注册，到最终写数据库，以及具体写哪些表。理解了表结构，然后在对应到 Django 的 Model 上，对于额外的用户信息，可能需要建一个 OneToOne 的字段，每次更新 User 时，同步更新下对应的 UserProfile ，这部分需要你自己来重写 User Model，参考这里：Customizing authentication in Django如果你看到这里，不妨点个赞，顺便看看我刚出版的这本书：胡阳：《Django企业开发实战》正式开售





    18. 学习python全栈需要哪些基础？

「全栈」这个概念是啥意思？学习 Python 开发的话，可以先开始学习 Python 基础，然后看自己的兴趣，决定走哪个方向。从你的背景来看，Web 开发可能会比较熟悉一些。参考：如何能高效率学习python？





    19. 做一个新闻网页，图片如何储存进数据库（图片数量大概在50张以内），图片和文字的排列又是怎样完成的？

图片是放到存储上的，会有一个对应的地址（也就是URL），跟文字一样排列就行，只是图片 URL 特殊处理一下，处理为 img 标签。





    20. 想自学python，淘宝上找版本很多，想问一下有什么推荐的书籍？

把这个三个回答分享给你吧：如何能高效率学习python？这四本书有必要都看吗？学完Python基础知识之后，发现对更高阶的内容不太理解，该怎么办？





    21. uwsgi的workers和processes数量设定的最佳实践是多少？

看下 gunicorn 官方说明吧：Design - Gunicorn 19.9.0 documentation我自己的经验是：根据自己的系统状况不断地调整各项参数进行压测，用表现较好的那个。





    22. 这四本书有必要都看吗？

没有必要都看。刚开始学，建议每个阶段选择一本书，精看！之后在看官网文档查漏补缺，或者翻看下其他的书。





    23. django 使用xadmin更新数据或删除数据就执行一些命令怎么办？

可以看下源码，在 xadmin/views 下。delete_model 方法参数跟自带 admin 有变化，save_model 在 xadmin 中是 save_models 并且参数不同。所以，还是看源码比较快。





    24. 如何能高效率学习python？

最核心的一点是：多写有用的代码。就学习来说，要「走直线」，就是说：先找本Python 基础的书来看，比如《Python 基础教程》或者《Python编程：从入门到实践》，然后找进阶的书，比如《Python 高级编程》、《流畅的 Python》等。（补充一点：每个阶段的书只需要看精一本即可，同水平的重复是低效的）。就实践来说，跟学习的内容对应，但最好能把一个小的 Demo 不断做大。随着代码量的增多，对于程序设计或者 Python 语言之外的需求就会随之而来。比如，怎么写面向对象的代码（意识到这只是一种众多开发方法中的一种），怎么优化数据、网络访问等等。随着你写的越多（注意：不是今天写个几百行的 Demo，然后扔了，明天再写个几百行的 Demo），涉及到的内容就越多。





    25. 学完Python基础知识之后，发现对更高阶的内容不太理解，该怎么办？

两个建议：把里面讲到的练习都自己实现一下（如果里面有讲练习的话），并且加入自己的想法进行调整，如果你能 hold 住这些练习，想必心里会有些底。找本 Python 基础的书看下，查漏补缺，视频不可能面面俱到，并且或多或少会夹杂一些作者自己对 Python 的理解，可能未必正确。关于基础的书，可以看我这个回答：应该怎样学习 Python？最后，本质上来讲，感觉不扎实是因为代码写的少，这个是硬性指标。你看到的都是别人的总结，写出来才是自己的能力。





    26. pip 无法使用？

可以把源改成https://pypi.doubanio.com/simple 试试 





    27. Django中导入（from...import.....)的问题？

IDE 应该是有明确的提示，可以注意下提示的内容是什么，应该只是提示，并不会影响执行。实际工作中都是会按照 Python 编码规范来写代码的，参考：PEP 8 -- Style Guide for Python Codeimport *的这种方式会引入你不可知的变量到当前的模块中，也就是经常说的：命名空间污染或者变量污染。 





    28. trello网页版如何设置工具栏是中文的？

头像，settings，语言





    29. 各位是出于什么目的读源码？

个人觉得有这么几个目的：调试代码 —— 你不跟进源码里，很难知道发生了什么。二次开发/把源码当文档 —— 之前有项目基于 Django 自带的 admin 做各种定制，文档上这部分介绍比较少，翻源码来的比较快。也包括后来使用的 xadmin ，也是基本把源码当文档来看的。掌握框架/学习框架 —— 比如 Django 源码或者 Tornado 源码，最近在系统的整理对Django源码的知识（并录成视频）。如果是项目中在用的框架，你对框架越熟悉，那么，你写起代码来越顺手，很多时候你能猜出来框架应该给你提供了对应的API，这个感觉无法描述。另外，大部分情况下程序员都是在新增功能/代码，所需要做的就是参考别人的代码，然后写出自己的代码。当需要开启一个新的项目时，往往也会参考之前的项目，然后结构拷贝过来直接用。所以有个合理（合格）的参考很重要，Django这个东西大而全，适合作为一个参考的对象。最后强补一个：学习如何写 Python/Javascript/Java/Golang 等代码 ——我们会比较习惯用自己熟悉的接口、自己习惯的方式写代码，时间久了会影响视野，尤其是在团队人员不多的情况下，没人相互影响，还是挺可怕的。所以看看用到的框架的源代码，看看他们是怎么写代码的，用了哪些你不熟悉的接口，或者你从来没用过的方式。





    30. 求推荐python web开发的书籍。？

2019-02-15 更新：已经正式开售：《Django企业开发实战 高效Python Web框架指南》(胡阳)【摘要 书评 试读】- 京东图书推荐两本书吧：一本是现在能买到的《Python Web开发实战》https://book.douban.com/subject/26852057/@董伟明 的书，我也写了书评。对于初学者来说，能够开阔在Web开发上的视野。另外一本是在年后能买到（会有一小部分人年前拿到）的我的书《Django企业开发实战》https://book.douban.com/subject/30434690/图灵社区预售，有部分样章：Django企业开发实战：高效Python Web框架指南之前放出来的草稿预览：课程介绍 · Django企业开发实战教程最后，想找一本涵盖了 Django、Flask、Tornado，并且还质量不错的书，基本上不可能。建议一次搞懂一个框架，比如说 Django（能让你学到 Web 开发的大部分知识点），之后你再去用 Flask 或者 Tornado 时会觉得：「好简陋/简洁/轻量」（逃—————— 2019-01-25 更新 ————看有答主提到了看 Django 文档就够了，我是表示认同的，Django 文档确实很详细了，如果英语不错，建议跟着文档走一遍，把文档也过一遍。不过我要补充的是，通过 文档能够掌握 Django 本身的用法，可能并不会 Get 到在实际工作中如何使用，这时可能就需要去找一个有实际工作经验的人写的博客或者图书了。注意：翻译版的 The Django Book   不推荐，那是基于 Django 1.1 的版本，有点老了 。





    31. django的manage.py自定义中可以加入manage命令吗？

你直接在你的自定义命令中调用build_solr_schema的接口就行了，命令只是接受终端输入嘛，最终也是调用函数执行的。 





    32. 如何系统地自学 Python？

不想复制粘贴内容了，刚回答了类似的问题：应该怎样学习python？可以参考。





    33. 应该怎样学习 Python？

如果英语不错，可以先过一遍官方文档：The Python Tutorial关于版本：Python 版本的话建议用 Python 3.6，这个版本可能是Python 3中应用比较广的（这个纯属个人猜测），因为 Python3.7 里增加了 async 和 await 保留字的变更，会有一些库还没跟上。另外需要意识到的是很多企业，即便是在今年2019年，也还是在使用 Python 2.7。2. 关于图书：《Python 基础教程》第三版都出了，据说卖的也不错，这也是我一开始看的比较系统的书，还不错，一定要坚持把书最后的练习都做了，写出代码并能运行。当时我也是花了点力气才弄完，很有帮助，可以看我写的相关文章：Python基础教程中的十个项目练习和代码 | the5fire的技术博客还有一本《Python 入门到实践》的书，据说卖的更火，很多人推荐，不过我没看过，仅供参考。看完基础书了之后怎么办，参考我的这篇文章：Python基础看完了？来两本进阶书 | the5fire的技术博客有了能写点东西的能力之后，还需要考虑怎么进阶，可以参考我的另外一篇文章：胡阳：Python工程师进阶之道除了前面推荐的两本书之外，还有一本书，进阶必备《流畅的Python》。3. 方向基础知识有了之后，就是后面方向了，因为我始终是在Web开发上，所以能推荐的也就是Web开发方面的东西。如果学习 Web 开发的话，Django是必须要了解并学习的。我知道很多人对「重」的东西有所诟病。But，简单的东西学会了所掌握的东西也就那么多，倒不如花点时间掌握更全面的知识。





    34. python 实现简单 在线编辑图片 的功能，大致需要用到什么库或者方法？

简单处理的话在服务端用 Pillow 即可，增加文字或者 logo 之类的也比较简单。参考：Python 中使用 Pillow 处理图片增加水印Pillow (PIL Fork) 5.4.1 documentation





    35. 知乎在Tornado开发中的Database Driver是什么？

因为没有用到 Tornado的 IOloop，使用的是 Gevent，所以不用考虑异步的 Driver。





    36. 如何合理地规划 Python 的项目目录？

之前写过一篇文章，介绍我们用到的项目结构：我们的Tornado项目结构 | the5fire的技术博客





    37. 程序员应该懂哪些产品知识，更好地去理解和开发好的产品？

理解产品经理所要功能之外的根本需求。除此之外涉及到的知识很多，从我这个程序员的角度来说，可能有：交互、视觉、设计、心理等。可以到豆瓣上找找「产品经理必备书单」。





    38. python程序缺少scrapy怎么办？

根本的问题可能在于你需要尝试脱离PyCharm试一试。





    39. 大佬们开发django-resetframework时的目录是怎样的？

会在对应的 app 下创建一个 apis 的目录，所有的 api 相关的逻辑实现都放到这个目录下。需要考虑的就是：哪些业务可能变更的比较频繁，哪些是不那么频繁的，让维护的焦点关注在变动频繁的代码上即可。





    40. 写代码的时候要考虑什么？

考虑下后面维护你代码的人会不会「骂街」；考虑下调你接口的人会不会「骂街」；





    41. jupyter notebook如何打开桌面的.py呢，按教程输入运行显示没有这个文件？

检查一下你的 jupyter notebook 启动的目录以及你目前的编辑文件的目录。





    42. spyder（python3）下写的.py文件，默认的编码格式是什么，是跟操作系统的编码方式一样吗？

没用过这个IDE，不过大多数IDE都有设置文件编码的功能，你可以看看。





    43. 在程序员的世界中，学习别人的博客，技能总结是常有的事，我们应该抄袭过来做自己的笔记吗？有没有必要这样？

你可以写读博文笔记。总结和拿来实践是最佳方法。





    44. 企业使用django一般会对哪些部分进行二次开发？

在最早之前，我们是对 Django 自带的 Admin 做了深入开发，其实也是基于它原本的逻辑，定制了CAS 认证的部分和基础的模板。再往后我们开始使用 xadmin ，直接替代了 Django 自己的 Admin，不过即便是使用了 xadmin 也需要进行定制开发。不过无论是对于 Django 还是 xadmin 来说，都提供了对应的接口，可以让程序员直接进行定制。对于一个通用的（Web）框架来说，不可能满足所有的需求，定制是不可避免的，就看定制的难度了。这方面 Django 和 xadmin 做的都不错（对xadmin来说，可能你能读懂他的源代码后，会觉得，嗯，也是不错的）。比方说题主说的中间件的部分，其实你看他的 Middleware 的实现就知道了，只需要实现对应的接口，也就是你的类实现了 _call_ 像这样：class SimpleMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response
        # One-time configuration and initialization.

    def __call__(self, request):
        # Code to be executed for each request before
        # the view (and later middleware) are called.

        response = self.get_response(request)

        # Code to be executed for each request/response after
        # the view is called.

        return response
在通过settings.py进行配置，就ok了。比较友好。定时任务方面，Django 本身没有这个功能，我们用过的是跟 Celery 结合。不过多机部署需要注意，要自己加锁：Task Cookbook - Celery 4.2.0 documentation 保证每次只有一个定时任务执行。另外还有比如你要做RESTFul 接口时可能需要用到的：django-rest-framework，以及做搜索时的 django-haystack 等。 二次开发是不可避免的，强大的框架应该提供友好的定制机制，以及丰富的生态。





    45. 一个软件通过蓝牙传文件传到电脑的原理是什么？

之前在学校做过基于蓝牙的贪吃蛇游戏对战，不过底层原理不太清楚，回答仅供参考：蓝牙也是一种协议。可以类比为socket编程。协议有了，能建立连接了，其他的就没差别了。





    46. python的rllib、urllib2、urllib3、requests有什么区别，生产环境用哪个？

requests 是基于 urllib3 的：https://github.com/requests/requests/blob/master/setup.py#L47从易用性上来讲 requests 用的多一些。





    47. python3与python2相比，优势有那些？

可以参考这个问题下：Python 2 和 Python 3 有哪些主要区别？ 各路大神的回答。我说下个人用起来比较好的点：系统默认编码是 utf-8，省去了每次写文件都要在头部加  # coding:utf-8 的麻烦。字符串类型统一，只有str和bytes，通过IO的数据都是bytes，习惯了也觉得挺自然的。coroutine对象，只需要在上层和下层的函数/方法上使用async和await就行，中间可以是正常函数。 至于性能上，看看 Instagram 在PyCon上的分享就知道了。可能的一些坑，虽然你知道，但还是会踩到：filter，map等这类函数的返回值变为可迭代的对象，而不是之前的 list，所以在作为list用的时候需要 list(filter(lambda x: x, &lt;list&gt;)) 一下。不过即便你知道还是会踩到，可能是因为老代码太多了。str 和 bytes的坑，如前所说，外部IO 拿到的都是bytes，不能直接跟str做对比，比如 "on" == b"on" 这种。 





    48. 请各位大佬简要说一下python两个框架tornado和aiohttp的区别以及适用范围？

tornado 不是基于 twisted 的，自己基于epoll/select 封装了协程的实现，个人理解 Python3 中的 asyncio 也是类似的实现。从官网上看介绍其实可以知道框架的应用范围，比如 Tornado：By using non-blocking network I/O, Tornado can scale to tens of thousands of open connections, making it ideal forlong polling,WebSockets, and other applications that require a long-lived connection to each user.不过 Tornado 对 Websocket 的支持比较有限（基于Tornado 4.x 版本的尝试体验）。用来做 Web 接口或者爬虫还是挺合适的。3. 至于 aiohttp 没用过，不过既然都是 asyncio 那一套，个人理解应该差不多，就是看哪个更多人在用，更稳定。比如去看 star 数量，去看 issues 数量和维护者解决 issue 的积极性，等等。





    49. python学习进度太慢了？

先找一套系统点的 Django 教程看吧，别贪太多框架，掌握一个，其他的熟悉起来很快。





    50. Python3浅拷贝的内存理解是怎么样的？

你可能需要理解什么是「值」？什么是「引用」。可以通过这个网站来观察执行过程：Visualize Python, Java, JavaScript, C, C++, Ruby code execution





    51. 怎样才能学会编程呢?

那是写的太少。多找些例子实践一下，理解原理，应该会好很多，题主的问题可能在于还没有编程的感觉。你想让电脑帮你计算个什么东西，那就得用编程语言来指挥它。最后，个人理解，编程是个实践型的学科，所有的经验还是需要落实到代码上，写的代码越多，经验越多。





    52. 各位大佬，两个月的时间能学完python并考证吗？

看基础怎么样，专门投入两个月时间来学习 Python 入门没问题。什么证？





    53. 如果两个人想用鼠标的点击声交流，怎样才是最好的做法呢？

摩尔斯电码了解一下： https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81





    54. 软件开发人员使用自己开发的软件是什么体验？

以前刷搜狐新闻，现在只刷知乎，很开心。 





    55. 请问我哪里做错了  做了好几遍也不知道到底哪里有问题 。？

注意代码格式，注意是缩进，另外注意是两个下划线还是一个下划线。可以考虑换一个 IDE 了， 对新手来说 PyCharm 会好一些，但是熟悉了之后还是要能够脱离 PyCharm 来写代码的。





    56. Django UpdateView怎么用？

直接看这个文档就好了Generic editing views只是你需要自己实现一个方法，类似这样。def get_success_url(self):
    return self.request.path






    57. A*算法能不能做航天器的故障诊断？

不懂你的算法是什么，但是从编程语言的角度来说，显然 Python 上手难度更低。





    58. 为什么看书自学编程，书上代码打了一遍，也能理解其中的意思，但脱离书本自己去做时，又毫无头绪？

目的只是按照书上代码敲一遍的话，那也只是按照书上敲一遍。如果有一个需求给你做，你照着书上的思路（代码）实现了这个需求，就有头绪了。等你能借鉴书上的写法自己实现一个需求之后，在下一步就是消化书里的内容，然后再拿到需求就可以自己发挥了。





    59. tornado可以自己实现命令行功能吗？

可以看看 Welcome to Click，易用性更好一些。





    60. 公司之前的项目是flask的，现在需要做一个网页端的后台管理系统，应该怎么写？

如果只是简单的增删改查，各种查询条件过滤，权限管理这样的功能。直接用Django吧。现成的数据库，直接使用``inspectdb``命令生成Model，自己配置下admin就好了。Integrating Django with a legacy database





    61. 关于sqlalchemy的连表查询问题？

SQLAlchemy不太熟，不过感觉题主应该去先看看文档，虽然这个文档看起来有点晦涩，但是大部分的使用都可以找到的。给一个Demo，仅供参考：Session = sessionmaker(bind=engine)

Base = declarative_base()
Base.metadata.create_all(engine)


class Category(Base):

    __tablename__ = 'category'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String(50), comment="")
    products = relationship("Product")


class Product(Base):
    __tablename__ = 'product'

    id = Column(Integer, primary_key=True, autoincrement=True)
    title = Column(String(100), comment="")
    category_id = Column(Integer, ForeignKey('category.id'))
    category = relationship("Category")


session = Session()

category = Category(name='name')
session.add(category)
session.commit()

post = Product(title='name', category_id=category.id)
session.add(post)
session.commit()

products = session.query(Product).all()
for pro in products:
    print(pro.category.name)






    62. Python怎么读取压缩档中的文件？

https://docs.python.org/3/library/zipfile.html





    63. 学Python的话有必要多看书吗？

学啥不都得多看书么。看书，输入信息。写代码，习得经验。写博客，总结信息和经验，输出信息。





    64. Python抄代码还是敲代码管用？

抄代码，写注释，这个路子不错，慢慢的你就觉得需要写注释的地方越来越少了。如果你觉得代码量太大，可以先去抄几个Java的代码案例。再回来抄Python就不觉得多了。):    当然了，如果你能把代码敲到电脑里执行一遍的话，那更好了，你需要理解它的逻辑，以及执行结果。





    65. ？: 正则表达式里这个表示什么意思 ？？？

(?:pattern)匹配pattern但不获取匹配的子字符串（shy groups），也就是说这是一个非获取匹配，不存储匹配的子字符串用于向后引用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。摘自：https://zh.wikipedia.org/wiki/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F用代码来表示就是：In [22]: re.findall(r"[+-]?\d+(\.\d+)", '-123.213124')
Out[22]: ['.213124']

In [23]: re.findall(r"[+-]?\d+(?:\.\d+)", '-123.213124')
Out[23]: ['-123.213124']






    66. Django Queryset 执行慢?

把SQL输出看一下，两个方法：FAQ: Databases and models2. print(log_queryset.query)另外，其他答主所言：抛开环境查问题，都是耍流氓。再另外，正常情况下for循环不会每次hit db。





    67. Python爬虫工程师转Python web开发 面试时没有web开发项目经验怎么办？

能写爬虫说明Python掌握的还可以，找个Web项目搞下。越完整越好，按照公司职位的要求把对应的技术都用上，最后能放到外网让大家访问。





    68. 你们是怎样接触到那些牛人的？

竟然还有『牛人』这样一个话题。答案是：到『牛人』出没的地方。当然，这个『牛人』是没法标定的，对你来说是，对他来说可能不是。以程序员为例，要想接触到『牛人』这个几个途径：入职一家好的公司且好的团队；经常上Github上看看你用到的开源框架那些维护者的动态，力所能及的参与到开源，可以产生进一步交流。关注知乎上那些确实很优秀的答主，除了看他们说什么，还要想他们为什么要这么说，然后可以进一步沟通。





    69. 参加 PyCon China 2018 北京场是怎么样的体验？

终于，PyCon China的大会也这么高大上了。今年的大会从组织到讲师分享，都很棒。唯一的遗憾是会场太多，不能分身。好在会有录像。这也说明了今年的主题之多，至少对我来说是多了很多选择。这样也能很大程度避免有些人只对某种主题有兴趣，但不得不一直等着听完其他的分享这样尴尬的体验。流水账记录开始
我到会场时洪教授已经开始讲了，不得不说这次的洪教授的内容《这16年来我从 Python 学到了什么》能够覆盖到各个层次、年龄的Python程序员。其中的骨架图、乐高和泥塑的对比让人印象深刻。我相信不同的人能看出不同的内容——语言使用、程序设计、系统设计、架构设计，很多道理都是相通的。第二个是Ezio——Python核心开发者，讲了CPython的开发流程，以及如何参与进去。对我而言信息量不太高，只是介绍常规的东西，But，我的英语听力是硬伤。这里多说一句，本以为是纯英文的演讲，开讲后发现还有翻译，这个很贴心啊。现成也能充分感受到英语不好带来的时差，英语好的人都开始笑了，英语不好的人听完翻译才开始笑，（呃，略尴尬后面图灵的编辑老师 @王军花 组了个饭局，跟 @Pegasus Wang 、 @崔庆才丨静觅和他的小伙伴一起吃了个饭。不得不说『一浪更比一浪强』（是这么说的吧 饭后跟 @TaoBeier 来了个线下见面，聊了聊他的主题，他们的部署实践、平台方的观点，对我这样的业务方还是很有参考价值的。现在基于Docker的持续集成和持续部署（也就是CI/CD）已经是很多公司的常态了，如果构建的比较完善，对业务开发来说，可以花更多的时间关注在业务上而不是基础服务上。觉得 @TaoBeier 可以跟 @姚钢强 多交流交流。之后在跟图灵和GitChat的老师聊了下出版和知识付费的事，只能说不同行业的从业者的思考模式是真不一样，相互交流能尽可能地减少盲区，吸收跨界的观点。下午在A会场，只是完整听了下面的演讲。@gashero《解锁GIL的新姿势》——也是涨了见识，我很少折腾底层的东西，所以对于善于折腾底层技术的人还是表示钦佩的。@messense《如何在Python中调Rust》—— 因为对Rust了解不多，也是开眼界的一个分享。但是，这里需要吐槽一点，如果在这样的大会上展示代码，字体需要放到很大才行，不然现场效果会打折扣，我在第二排还得借助手机摄像头才能看清楚。@姚钢强   《编程原则》——现场的版本是超预期的。之所以这么说，因为在公司刚强老师找我调研过我对这类主题的兴趣。设计模式这类的东西在几年前应该是比较流行的，对于能够很好吸收和掌握的人来说，无论代码组织、程序设计还是在架构设计中都会很有帮助。我自己对这方面还是比较关注的。不过即便是对自己熟悉的东西，在长久的代码细节和业务实现中『挣扎』久了，也会有些稀松。所以还是去听了听现场。现场效果不错，没有那么扣到那么细节，也没有上到『大道理』的层面，刚刚好。@z正小歪 《Python MRO》—— 很基础的概念，但是很多人应该都没细究过。对我而言，确实又复习了一遍，我数学也不好，没看那么深 ：) 。另外这里补充一点，有个同学补充了super的实质：MRO中的下一个调用，而不是当前类的父类的调用。这个知识点 @laike9m 有回答过：laike9m：Python中既然可以直接通过父类名调用父类方法为什么还会存在super函数？散会后直接回家吃饭了。也没来得及跟 @laike9m 线下见面。总结的说
不通阶段的人参会的目的不同，对我而言，这次参会线下交流的时间居多，并且我也比较喜欢线下的交流。原因很简单，线下交流得到的信息更真实（相对来说）。有时候在一个公司待久了，或者在一个行业待久了，难免会带上『枷锁』。不管你愿不愿意，环境对人的影响比想象的大。所以线下的活动很重要，了解其他人的看法，了解其他公司的实践。最后，真心觉得大会的组织者 @Manjusaka 和众多的志愿者们很辛苦。忙到大半夜，很早就得过去弄会场，关键是，不能够像观众那样认真地去听分享。希望明年还能保持这样的规模和品质。补充一下，没人觉得这次的T恤设计的很好吗，并且能穿出去。





    70. 程序员一般可以培养动手动脑的业余爱好？

写博客





    71. 超小团队选择Django还是Flask？

当然是选择Django。对内容型系统来说，没有什么比Django更合适了。另外学习、开发只需要一次，而维护确是需要持续进行的，选择一个功能更强的框架意味着你要维护的代码很少。说选择Tornado的可能是没用过Tornado。





    72. 最近Django学的有点迷？

可能是你只是在学习，没有实践，没有总结。实践是指搞出个能用的东西，部署到外网能供大家访问，而不是爬在硬盘里的demo代码。另外，无论选择哪个微型框架入门，一定要学习下大点的框架，学习它的组织思路。对你使用微型框架构建大型项目是很有帮助的！





    73. Django中HttpResponse(request)中request的作用？

你应该去看settings中TEMPLATES指定的那个engine的代码，不知道你贴的那个源码怎么找到的。request传到模板中是为了便于使用，比如你想在模板层只针对登录用户展示某个操作按钮等。





    74. django的这两个设计目的是什么？是不足还是有意而为之？

针对问题1：Django确实是这么做的，同名的模板会根据INSTALLED_APPS的顺序，加载前面的，这是他的查找规则，不理解这个确实可能会被坑。所以使用Django时，需要避免同名的模板名称。不过在我看来，同一个项目中不应该出现同名的模板，不管是在那个目录下。针对问题2：Django中路由处理、业务代码执行和模板是完全独立的，跟你说的那种html和业务代码混写在模板中是不同的逻辑。如果想要一样的效果也不是不行，可以通过设计url来实现。不过这么做似乎不合适。访问某个url期望得到的是某个资源，可能不是某个页面。





    75. 读源码能给我们带来什么？

0. 题主应该告诉我们你是怎么答的，这样才能有个样本嘛。看你有没有探索精神，是否对你每天都在用的框架/库抱有好奇心；读源码能提高自己的编码水平，就像为了高考写好作文会背很多范文/美文一样；提高对已有框架/库的定制能力，文档只会告诉你大概用法，熟读文档只能熟练使用，要深入掌握还得看源码；官方点的回答：虽然都说不要重复造轮子，但这并不妨碍我学习如何造轮子的好奇心；





    76. Python web框架用户量忽高忽低的解决方案？

这已经不是一个框架能解决的问题了。





    77. 请问如何将自己写的功能集成到django上？

你这个django app让别人是用就好了。怎么让别人用可以了解下python项目的打包和分发。setup.py 和pypi 





    78. django 的css，js，img 等文件夹可以不放在 stastic文件中，而放在其他的地方吗？

可以，看看STATIC_DIR 配置。





    79. django1.11.13+nginx+uwsgi把项目部署到了服务器, 静态文件丢失怎么办?

看下你collectstatic后，STATIC_ROOT下是否有文件





    80. django2.0写views遇到一个传参数的问题，我新手，求大佬？

错误信息发截图看看url定义发截图看看





    81. Django有foreignkey的model在ModelForm里如何写widgets?

逻辑没问题，名字对不上。你再看看Model字段





    82. Python开发需要自己配置redis集群吗？

看是什么规模的公司。有时间就多学点，技多不压身。





    83. Django裸奔是否会阻塞?

可行，但是建议花几分钟时间配置下gunicorn或者uwsgi。原因很简单：DO NOT USE THIS SERVER IN A PRODUCTION SETTING. It has not gone through security audits or performance tests. (And that’s how it’s gonna stay. We’re in the business of making Web frameworks, not Web servers, so improving this server to be able to handle a production environment is outside the scope of Django.)简单说runserver仅仅是让你在开发阶段调试用的，没有对生产环境做任何工作。所以你要是把他用到生产环境可能会出一些无法预料的问题。不过话说回来，我们最早之前也是用runserver来跑的内部的系统(可能那会儿是刚开始用Django，大家都不熟，直到我开始调整部署逻辑才发现这事儿)。Django的runserver默认是多线程的，具体可以看这里：django-admin and manage.py | Django documentation | Django，具体情况来说就是每来一个请求就会启动一个thread来处理请求。所以一个thread堵住，新的请求还是可以得到处理。如果坚持使用runserver部署的话，需要注意以下几点！！！：debug关掉不使用reloader： ./manage.py runserver --noreload 不要配置CONN_MAX_AGE 静态文件处理还是放到nginx上吧。还是建议你了解下uwsgi或者gunicorn，花不了几分钟。





    84. 'WSGIRequest' object has no attribute 'session'?

初步判断你是改了默认的middleware 导致没有初始化session。补充一下具体信息， 默认的 settings 中 middleware配置是这样的：MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
源码参考：django/django其中 SessionMiddleware 中关键部分代码（省略了其他代码）如下:class SessionMiddleware(MiddlewareMixin):
    def __init__(self, get_response=None):
        self.get_response = get_response
        engine = import_module(settings.SESSION_ENGINE)
        self.SessionStore = engine.SessionStore

    def process_request(self, request):
        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)
        request.session = self.SessionStore(session_key)  # 注意它
所以如果你正确配置了 Middleware 的话，应该是没问题的。 





    85. 如何看待 PEP 572 ？

谢 @董伟明 邀请。第一次看到这个PEP第一印象是，似乎有点用。比如说，举个不怎么合适但能表达意思的例子：func = lambda x: 1 if x else 0
if func(param):
    value = func(param)
    # do something


# 或者我写出这样
func = lambda x:1 if x else 0
result = func(param)
if result:
   # do something

现在我可以这么写：
func = lambda x: 1 if x else 0
if value := func(param):
    # do something

## 等等  ...  =.=!
## 刚才敲下 := 时竟然觉得有点顺手...
接着我想到的就是，如果有人在我们的项目里面用了大量的这样的写法，我估计其他人会疯掉。想想下，满屏幕代码中，去寻找 := 这样的目标组合。（密密麻麻密密麻麻密麻密密麻麻麻就好像列表推导式也挺好的，但是有些代码读起来还不如拆开好理解。我的看法是，语言的贡献者们肯定想让语言本身越来越好用，给用户（开发者）提供更多的选择。不过有句话：80%的人只用到了产品的20%的功能。另外需要关注的一点是，PEP最后的“Style guide recommendations”If either assignment statements or assignment expressions can be used, prefer statements; they are a clear declaration of intent.If using assignment expressions would lead to ambiguity about execution order, restructure it to use statements instead.只需要在明确能够使用它的地方用它，否则忘了这个特性吧。最后，其他大佬的回答都挺好，学习了。最近focus在Django上，都没时间....





    86. DjangoRESTFramework比原生Django配合JSONResponse有哪些优势？

没可比性。一个人对RESTful风格的实现，一个是用来帮你返回json格式response。





    87. 如何提高自编代码的能力？

一开始都是这样，写多了就好了，注意是“写”多了，而不是copy多了。就跟用键盘打字一样，打了这么多年谁还不会盲打呢。





    88. django如何针对pc和手机两个访问设备使用不同的模板?

渲染数据不变的情况下，根据User-Agent渲染不同的模板就行了。补充一下吧。你只需要自己写一个render方法就行了。在这个render方法中通过request拿到ua信息，判断如果是移动端访问，那就你要传过来的template_name名称前面加`mobile``前缀，或者就后缀也可以。





    89. django2.0启动网站时出现错误？

记得之前回答过类似问题，电脑名是中文的吧。





    90. 使用flask搭建一个小型的电商网站是否可行？

可行。对于内容型系统，个人倾向于Django。不过这也取决于你(团队)对哪种框架更熟练。





    91. Django富文本编辑器前端显示html标签？

查下  django template autoescape 你就知道了





    92. django的session是存在数据库的session表里，这样会不会对数据库压力过大？

django的session engine可以配置。搜索：django redis session





    93. django 适合做一个学校的信息管理系统吗？

适合





    94. django学到什么程度就可以试着去面试了？

简答：熟悉Django的各个模块都能做什么，各模块之间的相互作用。最好的情况是能根据需求定制。可以尝试不参考别人代码（只参考文档）独立花一周时间弄出来一个完整的博客。





    95. Django下python写简单页面，为什么数据保存到mysql中是空的且读取不出来（代码页面如下）?

另一个回答说的很对。你应该在save之前把要save的内容print出来看看。





    96. django 时间段的记录？

谢邀。需求介绍太简单，没明白。





    97. Django 查找 templates 时，设置'DIRS': ['templates'] 也可以？

你应该看最新的Django文档。简单的只写`templates`确实有些困惑，不过这可以理解为Django的默认规则。 另外组织templates文件也有多种方式，最常见的两种是：一、全部放到项目同名的app下，以app的名称作为区分；二、每个app下的templates只存放自己的模板文件。并且各app下的模板文件命名需要避免重复。





    98. Django2.0.2 对已经创建的model进行create操作，报ValueError错误怎么办？

重要的事情说三遍："Equip.name" must be a "EquipNames" instance.，你都写了三遍了还不知道问题？两种解决方案：models.Equips.objects.create(name_id=int(contain['equip_name']), SN=contain['SN'])把contain['equip_name']转为EquipNames对象。





    99. django 到底有多慢？

先参考这个回答：https://www.zhihu.com/question/265263719/answer/293901119快慢是相对的；人言不足信，就算是Instagram，因为大家的应用场景和团队组成都不同；实践能出真知；最后，1000多的uv考虑啥子框架性能 





    100. Python Django 开发web，是重写的admin，还是用自带的admin？

主要看你是什么需求，以及你对django admin的理解。我说说我用到/经历的几个场景：一、简单的数据管理后台，带权限这种场景下，基本上就是撸出Model，配置admin.py，接入SSO登录，创建个权限组，部署好，丢给产品（产品内心OS：喂，我原型还没画好呢 -- 玩笑: ）逃）二、复杂的页面定制，额外的权限逻辑这种情况下，我们基本上是基于django的admin重写了展示层的逻辑，重点在：admin.ModelAdmin的重写，以及template的重写。权限的话，自定义基础的modeladmin，重写权限部分逻辑。三、只要求好看，好用的后台，什么结果，工程师说了算。现在基本就是这种模式了，目前我们还是基于xadmin来开发，开发速度跟用自带的admin差不多，需要做的就是理解它放开了哪些接口给你，让你能方便的定制。总结下，上面说的是需求，另外一部分，还得说对django admin的掌握，因为你得了解需求跟框架能力能不能匹配。还是说说我自己的经验，django admin的代码我在之前定制后台阶段，基本都看了（没办法，文档太少），xadmin的代码也是一样，所以要是我拿到需求，如果是内容管理系统开发的需求，肯定还是基于admin或者xadmin来做，因为我知道他们提供了哪些能力给我，我只需要基于这些能力稍作发挥即可。最后说一句：一个好的框架一定会把需要经常变动的部分给你留好接口，便于自己来实现。从这点上考虑，django admin以及xadmin还是挺好的。(当然，除了文档)





    101. MySQL每次都是到这个环节就安装失败？

谢邀，Windows上没弄过MySQL。你这个需求一定要在Windows上做吗。





    102. python有没有像前端的MDN一样的网站?

Mac上有个软件：Dash，不知道其他平台有没有。另外还有个网站：DevDocs





    103. 【求助】ubuntu下，python3的django总是出错，快疯掉了。还让人过年么？

pip uninstall  django然后，pip install django  注意看输出，会告诉你django装到哪了。以及django-admin  如果还是找不到命令，就把刚才记下的路径  django-admin的，加到PATH  环境变量中





    104. 中小学生已经开始学Python了 科班出身的Python开发者应如何提高自己未来的核心竞争力？

先玩笑一句：有朝一日Python变为最好的编程语言之后，你还怕更有经验的Python工程师不能过上好日子吗？正经答题这是好事，至少不会担心以后没地方用Python，对吧。对于现在的程序员来说，最要紧的，最要紧的，最要紧的，是少写bug，或者努力让自己少写bug。





    105. view在django中生命周期和原理?

简答一下，建议可以先看着Django多线程方面的东西：Django 多线程问题是怎么回事？然后在看你的问题，给几点建议，仅供参考：了解Python中，全局变量，模块级变量，类变量，实例变量，局部变量的初始化时间点了解Python中线程安全的概念以及哪些对象（类型）是线程安全的了解多进程中如何共享变量（资源）了解Django中url dispatch部分逻辑





    106. 在django环境下，页面添加<!DOCTYPE html>，导致css文件无法生效，应该怎样处理？

上代码吧





    107. django rest framework和xadmin共同适用的django版本？

xadmin直接用github上的master分支，django用1.11，DRF应该不用操心版本





    108. 有哪些 python 的在线练习题或编程挑战的网站？

from reddit/python: Python • r/Python ，打开看右侧列表。Online exercicescodingbatpyschoolscodecademyProblem Solving with Algorithms and Data StructuresHow To Think Like a Computer ScientistCode School: Try PythonPython Online Tutorial | Code Schoolprogramming challengesThe Python Challenge (solve each level through programming)CheckiO (game world)Project Euler (math heavy)CodeEval (unlock job offers)/r/dailyprogrammer





    109. 网上开课好多人都用什么软件？

程序员来答一发吧 :)17年4月左右开始用小鹅通。在此之前有考虑自己建站，买视频托管服务，不过成本太高。我的主要需求就是能上传录播的视频，有支付通道。其他的都是次要的。从成本上来说，之前的小鹅通只是收流量费和存储费（现在是推出了标准版），内容少的情况下，成本不高。并且印象中其他平台都是直播类的。从使用的角度来说，比较简单，创建专栏，添加视频，上传视频，就可以了。另外对于技术视频来说，在PC版能播放也是个刚需（手机上看代码很费力），这个小鹅通也提供了。流量的话，就像其他答主所言，需要自带流量。它有分销市场，我没怎么参与就不说了。缺点的话：应该基于微信的平台都有这个问题，只支持微信支付。





    110. django settings里的DATABASE_ROUTERS 可以赋值给实例吗？

你应该先试试能不能用实例，然后再发问 : )https://github.com/django/django/blob/master/django/db/utils.py#L241





    111. Django做用户量大的项目怎么样呢，性能会变得差吗，影响用户体验大不大呢？

也来答下这个问题吧。分几点来答：1. 首先，这其实是个技术选型题。做技术选型的时候不能单纯的考虑性能，应该优先考虑业务类型，以及团队水平。另外的话，框架只是其中一环，还有配套呢。如果是数据驱动型，尤其是要用到关系型数据库，那么选择Django足以，ORM会比较省事，但是性能损耗是个很明显的问题。不过还是看团队，如果大家玩flask或者bottle都贼溜，那么还要什么Django，自己造就行了。（题外话，不过你得提防比较水的人破坏整体结构）如果下游是由很多微服务构成的，Tornado处理起来会有一定优势，用它的异步模型。（而不是用同步的方式写代码23333，要是这么用的话，你让flask怎么想，让bottle怎么想，让村东头的sanic怎么想 &lt;-.&lt;- ）2. Django能抗多少量？上面选型如果定下来Django了，那么剩下的就是“Where there is a will, there is a way”的问题。这个问题跟“Where there is a way, there is a will”的差别在于，并不是框架能支撑你到多大的并发量，而是你想要抗住很大的并发量，怎么优化现有框架。当你的项目大到一定程度，瓶颈基本不在框架上（换语言另说，有人不懂框架乱搞的另说）。我们用Django开发对外的产品不多，量级10w 100w的都有，但是我们上线前的准备都是朝着要抗足够高的流量目标的（谁没有一颗抗万亿流量的心呢），并且要能够通过增加机器提高承载能力。当然有些业务类型没法通过简单的增加机器来进行扩容，那只能通过其他途径优化单机的TPS。所以最终压测的结果都要远高于真实流量。百万量级的产品，扛起来并不费力。不过还是强调一下，看业务类型！3. 用户体验问题当量级变大之后，影响用户体验吗？用户体验分很多方面，包括交互，设计，前端，后端。这里讨论的是后端，那么就说后端。后端对用户体验的影响只有一个——那就是响应时间。当你的网站或者接口有一个用户访问时，能在短时间内返回response，那么，当用户量达到10w时，是否能在同样的时间内返回response呢？这是个问题。对于后端来说，把响应时间控制在合理的范围之内是很重要的。20ms和30ms或许差别不大，但是50ms跟100ms会有明显差别。怎么衡量合理的返回时间呢？这块还是得说点细节，比方说Django的系统，一个用户请求进来了，需要涉及多少次Redis查询，平均每次响应时间是多少；涉及到多少次内网或者外网的HTTP请求，平均响应时间是多少；涉及到多少次MySQL查询，平均响应时间是多少。所以大家面试时都喜欢问一个问题：用户输入网址之后，到页面展示出来的详细过程是什么？当你知道了所有的细节之后，你就能知道，如果系统只涉及到Redis查询，那应该多少ms内返回是合理的，如果你发现nginx日志里面的后端响应时间高于你的预期，那你就得排查下了。其他的也是类似。所以当谈论到后端上的用户体验时，我自己的看法就是，能多快就多快的给他数据。磨磨唧唧，妥妥拽拽的最招人烦。原文地址：Django适合做大用户量的系统吗？ | the5fire的技术博客





    112. 本人现读大一，刚学完python的基础语法，想进一步学更多操作，希望各位大牛给我指指路，谢谢！？

这篇文章可以看看：Python工程师进阶之道 | the5fire的技术博客





    113. Django 多线程问题是怎么回事？

我来答下吧：对于初学Web开发，理解一个web server如何能同事处理多个请求很重要。当然更重要的是，理解你通过浏览器发送的请求web server是怎么处理的，然后怎么返回给浏览器，浏览器才能展示的。我到现在还记得大概在2010年左右，看了tomcat源码之后，那种豁然开朗的感觉（对，当时我还在写Java）。搞技术的人，总是希望花点时间，能够更透彻的看透整个网络世界的构成，而不是那啥。要理解web server如何能处理多个请求有两个基本要素第一，知道怎么通过socket编程，这也是我在视频中强调的一点，理解这点之后再去看看WSGI，你就知道Python世界中大部分的框架怎么运作了。第二，多线程编程，理解了这个，你才能知道怎么着我起了一个web server，就能处理多个请求。 多进程也是一样的逻辑。通过这两段代码，应该很好理解：呃，知乎的编辑器还是那么难用，尤其是贴代码时， @Pegasus Wang :)想要copy代码的话，去原文看吧，知乎这贴代码很麻烦。试试吧，与其着急去学习框架不如先弄懂这个。参考WSGI——Web框架基础 - 《Django企业开发实战草稿》Python官方库的socketserver源码原文地址：PythonWebServer如何同时处理多个请求 | the5fire的技术博客





    114. python的应该一个class放一个文件吗？

个人经验，遵循一个原则——高內聚，低耦合。一个文件(模块)中的内容尽量是按照某种方式(业务、主题、逻辑等)聚合在一起的。除非两个模块是相互依赖的关系(比如view依赖model或者业务view依赖抽象出来的baseview)，否则不应该出现相互引用。





    115. Python在导入pyquery、redis的时候提示No module named * 要怎么解决？

给个提示，交互模式输入：import sys sys.path





    116. 想利用python写一个简单的类似于小区管理后台的，该怎么做呢？

看你对Python的掌握怎么样了；看你的需求有多复杂了；Python掌握的不错，需求不复杂，只做简单的信息管理，用（学）下Django，搭好Model，管理后台就出来了。





    117. python3.4 编码问题？

把microblog代码贴出来，大家才能具体分析；猜测你的电脑名应该是中文的。





    118. python计时器中的疑问？

是让你输出实例是这个实例显示的内容是有意义，__str__是用来转string时调用的。同理可得，__repr__是对对象进行repr时调用的。赋值相对于定义了一个跟__str__一样的方法。





    119. Mac版python安装requests不成功？

去github找urllib3的包，下下来，覆盖出错的包





    120. Python运行subprocess.Popen('dir',shell=True,)的问题？

1.你去cmd里面执行下你的命令试试2.别人的电脑是windows吗3.参数里面的shell是什么意思 





    121. Mac 下有什么好用的屏幕录像软件？

买了iShowU ，然后试用了下这个：Movavi Screen Capture，感觉比iShowU要好。。就是贵。不过优势是，选择区域录制时，有区域提示，iShowU没有提示，这很尴尬，不知不觉就没录上。另外Movavi录完能做简单的视频裁剪处理。





    122. 国内有哪些 Django 牛人？

目前就想到俩人，在我开始使用Django时，我觉他们已经对Django非常熟悉了：一个是之前的同事：flisky (尹吉峰)另外一个就是xadmin的作者：sshwsfc (差沙)其他的想到再补充。建议大家多follow github上的动态。毕竟代码传递的信息才是最直接的。补充一位，刚才跟大妈（Zoom.quiet)聊天才想起来。Uliweb（全栈式的Python Web Framework）和ulipad的作者：limodou (limodou)Uliweb-Doc很早很早很早就开始用Python和Django的大神。





    123. Django关于ORM实现中是如何使用元类的？

刚理清这部分代码，答下。Python2里面metaclass是这么用的:class Foo(object):   __metaclass__ = MetaClassPython3里是这么用的:class Foo(metaclass=MetaClass):   pass为了兼容，所以才有的题主贴的代码。这样可以做到兼容2和3的原理还是metaclass的机制：   如果当前类没有__metaclass__，但是有至少一个父类，那么会去使用第一个父类的__class__作为__metaclass__，如果没有__class__则会使用type来创建类。刚写了篇文章说这个事：Django源码中的metaclass使用是如何兼容Python2和Python3的





    124. 如何看待 Instagram 将所有 Web 后端迁移到 Python 3.6 ？

简答一下吧用户不关心你用的是Py2还是Py3，你只要挂了，就有人骂街，不信你看知乎。产品只想月底前上线，至于用啥，鬼才关心。技术趋势不可忽略，不然，几年后你招不到人，因为大部分库都已经开始不支持Py2了。会用Py2，用Py3做项目没问题，令人头大的是基础设施。整套流程都得改。不是不好改，是需要时间，这个时间产品/领导是不会给的，得自己争取（挤）。@董伟明 期待豆瓣的迁移分享，O(∩_∩)O~补充两点吧：5. 作为基于Django的最大规模的应用，迁移需要成本，当然也会得到对应的收益，slide中动机部分已经说明了。对我们而言，这有一定的标杆作用，可以理直气壮的说，看Instagram都迁移Py3了，人家那么大，我们这么小，更容易啊。6. 演讲中也说到了踩过的几个坑，对于后面想要迁移的人来说，少了些试错的成本。又是个利好。





    125. Django 分表 怎么实现？

&lt;靠啊，编辑了半天，保存不了，知乎编辑器是出啥鬼了。一贴代码就报错/(ㄒoㄒ)/~~&gt;跳到公众号看吧：Django分表的两个方案-------------------------------------------------------部分文字：这个问题戳到了Django ORM的痛点，对于多数据库/分库的问题，Django提供了很好的支持，通过using和db router可以很好的完成多数据库的操作。但是说到分表的问题，就有点不那么友好了。但也不是那么难处理，只是处理起来不太优雅。解析在Django中，数据库访问的逻辑基本上是在Queryset中完成的，一个查询请求，比如：User.objects.filter(group_id=10)。其中的objects其实就是models.Manager，而Manager又是对QuerySet的一个包装。而QuerySet又是最终要转换为sql的一个中间层（就是ORM种，把Model操作转换为SQL语句的部分）。所以当我们写下User.objects的时候，就已经确定了要访问的是哪个表了，这是由class Meta中的db_table决定的[代码]理论上讲，我们可以通过在运行时修改db_table来完成分表CRUD的逻辑，但是the5fire在看了又看源码之后，还是没找到如何下手。还是上面的问题，当执行到User.objects的时候，表已经确定了，当执行到User.objects.filter(group=10)的时候只不过是在已经生成好的sql语句中增加了一个where部分语句。所以并没有办法在执行filter的时候来动态设置db_table。对于问题中说的get也是一样，因为get本身就是在执行完filter之后从_result_cache列表中获取的数据（_result_cache[0]）





    126. Python 里itchat 模块能实现什么有趣的东西？

前几天想到一个可能得刚需，搞一个机器人，用来做群聊天记录备份。只需要拉机器人进群，就能自动备份聊天记录。





    127. python3，import自己的module出错？

sys.path.append('E:\\PYstock')，因为你用的模块在这个目录下面。另外把东西放到包的__init__.py中是便于外部引用。





    128. 如何才算能学好python及其他相关知识，达到参加面试水平？

如果只想应付面试的话，多刷面试题是肯定要的：GitHub - MaximAbramchuck/awesome-interview-questions: A curated awesome list of lists of interview questions. Feel free to contribute!GitHub - taizilongxu/interview_python: 关于Python的面试题但是面试跟考试最大的不同就是，即便你知道标准答案，你也过不了。想通过面试，最简单的方案就是：多！写！代！码！把知识转换成经验。But！面试永远不是最终目的，也不可能像考试那样，统一衡量。比如我们的技术栈是：Python，Django, Tornado, Fabric,Redis。其他家的可以是另外的技术栈。除非你盯上了哪家，就按照她的岗位需求来。So，衡量一个人能不能干活的一个标准是他干成过什么活儿，活儿干的咋样。如果有一个项目，你接过来，用Python可以很容易的实现，那就说明你学的差不多了。另外还有很多东西是语言不相关的，Python也只是个工具而已。PS：我们在招人，有兴趣可以点：PythonWeb工程师招聘Python高级工程师招聘  也可以直接发简历给我。





    129. 笔记本电脑上键入www.sohu.com，为什么出来的是手机搜狐呢（自动转为m.sohu.com）？

应该是浏览器ua被识别为移动浏览器了，方便说下是什么浏览器吗？如果能看user agent的话更好。





    130. trello如何下载附件？

附件会传到亚马逊的s3上，估计得翻墙才能下载。





    131. 基于tornado的网站开发过程中，前端程序员是怎么工作的？

这跟Tornado没关系，所有后端语言都有这问题。前后通吃确实是最好的，但是开发流程是串行的。专门的前段来干前端的事，后端把业务逻辑写完，前端页面也就做完了，然后一个词叫做:  套页面。





    132. Trello不能显示Card是怎么回事？

你是开filter了吧，看看右上角





    133. 多人同时做一个word？

google doc或者找在线协同工具类似trello这种。国内有很多这类的创业公司，比如Worktile等





    134. Django中多个项目如何共用一套用户系统？

关键词:django cas，只要把用户系统做成服务就行了





    135. 招聘 Pythoneer 的最基本要求是什么？

Python基础熟悉，能用学到的知识做些实践。再学习下网络编程，做些实践。然后再看下Web编程，如果是走web方向的话，依然需要做些实践。最好这些实践都是在类Linux系统上完成，并且实践结果可以拿出来跟别人分(xuan)享(yao)。





    136. Django 1.7.1 数据库连接持久化不起作用?

http://www.the5fire.com/reduce-db-conn-with-django-persistent-connection.html  可以看看这个





    137. 关于django自动生成管理界面的疑问?

可以！学Python吧。Django定义好模型后台就出来了





    138. 准备自己建一个个人博客，有什么好的框架推荐？

当然是Django  这个脱胎于新闻系统的货





    139. Linux 下 gvim 搭建 python 编程环境?

VIM插件管理及python开发环境配置  可以参考下，话说我也习惯用在终端里用vim





    140. 程序员想写一些技术博客，除了做个人网站，CSDN，博客园，还有其他推荐吗？

github pages应该符合你的需求。





    141. 如何看待百度阅读的“阅读免费+广告分成”的模式？

个人感觉，不差钱的基本不会考虑免费（带广告）阅读。差钱的，免费（带广告）阅读也好过从网上搜索一个txt或者epub，然后上传到电子阅读器中。自从去年从网上下载了本电子书，然后发现各种残缺之后，愤然的买了本电子书（你们能体会那种读到畅汗淋漓处，突然。。。断篇了的赶脚吗）。于是就不再继续这种搜索+上传到阅读器的这种读书方式了，电子书比纸书已然便宜了（关键是方便了）很多。带广告阅读可能是读者省钱，版权方还能有收益的一种方式。不过目前的广告方式有点Low，想想那些精美杂质上的广告，或许百度阅读是按照这个模式。利益相关：百度阅读作者一枚





    142. requests 和 scrapy 在不同的爬虫应用中，各自有什么优势？

requests是库，scrapy是框架。后者可以让你少写很多代码





    143. 请问哪里可以下载djaong开源的app的？

如果是觉得django自带的admin太丑，功能太弱，可以考虑下强大且界面美观的django-xadmin， 不过文档不太多。可以参考下我的这篇文章 手把手教你用xadmin替换django自带的admin模块





    144. 程序员业余时间做些什么会比较有成就感？

写博客，让自己感觉自己还在进步。给开源项目提Patch，让自己能做点贡献。在论坛或群里和初学者聊聊天，交流交流工作和学习。..............





    145. 如何看待一些知名博客推广软文的行为？

感谢  @justjavac 再次提到我。我的博客也不是啥名博，对这个事也只能从我的角度来说。在我看来软文其实有两种：一、为了挣钱；二、觉得这东西好。题主说的主要的争议在于挣钱的那种。单纯在blog上挣钱的方式也分两种：一、广告；二、软文。软文这东西和广告不太一样，广告是就摆在左边（右边），你有兴趣就点。软文则是融入到了作者创作的内容中了。对读者来说，软文中的内容比广告的影响力要强太多了。因此就得说软文推广的是什么很重要了，比如像我这样，写PythonWeb开发博客的人，有一天写了篇减肥茶的文章，那一定得是节操掉了。我关注的很多博客和微信公共账号，都有软文出现。但是并不招人烦（至少我不觉得烦）。总结一下，软文作为知名博客的一种收入方式肯定是合理的，就像是各大视频网站都有广告一样。关键在于你播的是高质量的制作的广告还是那种“深夜无人，来玩游戏”的广告。





    146. django 使用 mongodb 之后 admin 还可以使用么？

看到一个这个，没试过，你可以试试：https://github.com/jschrewe/django-mongoadmin





    147. 为什么很多技术博客要做成独立博客？

笼统来说大多数的技术人都是不折腾会死星人。就我自己来说，在CSDN上写过两年博客，后来知道可以自己搭建一个独立博客之后就义无反顾的给自己挖了一个很深的坑——独立博客。折腾的原因有很多，楼上说的是本质的一个：黑客都有控制欲。另外的原因可能有：给自己搭一个实战的场地，对于web开发者来说;给别人一个认识自己的机会，无论对于开发者还是一些产品经理都是一个途径，塑造个人品牌。。。。。。。





    148. 有哪些关于 Python 的技术博客？

从这：Python4cn(news, jobs) 可以到很多。





    149. Trello 如何查看/还原被 "Archive This List" 后的 List?

在trello的左上角点击你的board名，然后选择Archived Items，然后就可以看到你的card了。如果是List的话，你点开Archived Items之后有一个连接：Switch to Cards，就可以看到你的List了。点击Send to board按扭就可以了。





    150. Trello 等任务管理工具体验如何？

trello还是挺好用的,无论是从小团队开发(交流,协作,文档)还是从个人使用(包括个人待办事项,学习计划,还有其他一些随时需要记录的东西).





    151. 国内Python的高手超过10万人吗？

没有调查还真没有发言权，不过可以统计下国内python一类的社区的活跃度以及访问量。另，‘高手’很难定义





    152. 筹备创业时哪些方式可以勾引技术人员？

1、创始人魅力、团队氛围、idea、未来





